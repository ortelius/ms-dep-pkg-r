name: Build/Push Image and Release Charts

on:
  push:
    branches:
      - main
    paths-ignore:
      - "chart/ms-dep-pkg-r/Chart.yaml"
      - "chart/ms-dep-pkg-r/values.yaml"

permissions: read-all

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      statuses: write
      contents: write

    env:
      DHURL: https://console.deployhub.com
      DHUSER: ${{ secrets.DHUSER }}
      DHPASS: ${{ secrets.DHPASS }}
      REGISTRY: quay.io
      COMPNAME: ${{ github.event.repository.name }}
      BRANCH: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@1f99358870fe1c846a3ccba386cc2b2246836776 # v2.2.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout
        id: checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 2

      ################################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: github/super-linter/slim@985ef206aaca4d560cb9ee2af2b42ba44adc1d55 # v4.10.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON: true
          VALIDATE_PYTHON_BLACK: true
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_PYTHON_ISORT: true
          VALIDATE_PYTHON_MYPY: true
          VALIDATE_PYTHON_PYLINT: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_MARKDOWN: true

      - name: Set Convenience Env Vars
        id: env
        run: |
          echo "CHART_VERSION=10.0.${{ github.run_number }}" >> $GITHUB_ENV
          echo "IMAGE_VERSION=10.0.${{ github.run_number }}-g$(echo ${{ github.sha }} | cut -c 1-6)" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.BRANCH }}-v10.0.${{ github.run_number }}-g$(echo ${{ github.sha }} | cut -c 1-6)" >> $GITHUB_ENV

      - name: Configure Git
        id: git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Login to Quay
        id: login
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERID }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3.3.1
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@1f0aa582c8c8f5f7639610d6d38baddfea4fdcee # master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@168b99b3c22180941ae7dbdd5f5c9678ede476ba # v2.2.7
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Values and Chart
        id: chart
        uses: fjogeleit/yaml-update-action@d98ee6a10a971effea75480e3f315e4dacc89a23 # main
        with:
          message: "Update Image Version to ${{ steps.image.outputs.version }}"
          commitUserName: "$GITHUB_ACTOR"
          commitUserEmail: "$GITHUB_ACTOR@users.noreply.github.com"
          branch: main
          masterBranchName: main
          changes: |
            {
              "chart/${{ github.event.repository.name }}/values.yaml":
              {
                "image.repository": "${{ env.REGISTRY }}/${{ github.repository }}",
                "image.tag": "${{ env.IMAGE_TAG }}",
                "image.sha": "${{ steps.build.outputs.digest }}"
              },
              "chart/${{ github.event.repository.name }}/Chart.yaml":
              {
                "version": "${{ env.CHART_VERSION }}",
                "appVersion": "${{ env.CHART_VERSION }}"
              }
            }

      - name: Generate SBOM
        id: sbom
        run: |
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b .
            ./syft packages ${{ env.REGISTRY }}/${{ github.repository }}:${{ env.IMAGE_TAG }} --scope all-layers -o cyclonedx-json > cyclonedx.json
            cat cyclonedx.json

      - name: Update Compnent
        id: updatecomp
        env:
          DIGEST: "${{ steps.build.outputs.digest }}"
        run: |
          pip install ortelius-cli
          dh envscript --envvars component.toml --envvars_sh env.sh
          source env.sh
          dh updatecomp --rsp component.toml --deppkg cyclonedx@cyclonedx.json

      - name: Install Helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
        with:
          version: v3.10.0

      - name: Prepare GPG key
        run: |
          gpg_dir=.cr-gpg
          mkdir "$gpg_dir"
          keyring="$gpg_dir/secring.gpg"
          base64 -d <<< "$GPG_KEYRING_BASE64" > "$keyring"
          passphrase_file="$gpg_dir/passphrase"
          echo "$GPG_PASSPHRASE" > "$passphrase_file"
          echo "CR_PASSPHRASE_FILE=$passphrase_file" >> "$GITHUB_ENV"
          echo "CR_KEYRING=$keyring" >> "$GITHUB_ENV"
        env:
          GPG_KEYRING_BASE64: "${{ secrets.GPG_KEYRING_BASE64 }}"
          GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@98bccfd32b0f76149d188912ac8e45ddd3f8695f # v1.4.1
        with:
          charts_dir: chart
          config: .cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Trigger Rebuild of Main Chart
        uses: benc-uk/workflow-dispatch@798e70c97009500150087d30d9f11c5444830385 # v1.2.2
        with:
          workflow: generate-main-chart.yml
          repo: ortelius/ortelius-charts
          token: ${{ secrets.HELM_INDEXER_TOKEN }}
